{"version":3,"sources":["axios.js","Row.js","request.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","console","log","className","map","movie","src","poster_path","alt","name","id","API_KEY","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAOeA,E,OAJEC,EAAMC,OAAO,CAC5BC,QAAS,iC,MCoCIC,MAlCf,YAAmC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAAY,EACJC,mBAAS,IADL,mBACzBC,EADyB,KACjBC,EADiB,KAgBhC,OAZAC,qBAAU,WAAM,4CAEd,4BAAAC,EAAA,sEACwBV,EAAMW,IAAIN,GADlC,cACQO,EADR,OAEEJ,EAAUI,EAAQC,KAAKC,SAFzB,kBAGSF,GAHT,4CAFc,0DAOdG,KACC,CAACV,IAEJW,QAAQC,IAAIV,GAGV,sBAAKW,UAAU,MAAf,UACE,6BAAKd,IAEL,qBAAKc,UAAU,eAAf,SACGX,EAAOY,KAAI,SAACC,GAAD,OACV,qBAEEF,UAAU,cACVG,IAAG,UA3BE,wCA2BF,OAAgBD,EAAME,aACzBC,IAAKH,EAAMI,MAHNJ,EAAMK,aC7BjBC,EAAU,mCAaDd,EAXC,CACde,cAAc,8BAAD,OAAgCD,EAAhC,mBACbE,sBAAsB,wBAAD,OAA0BF,EAA1B,sBACrBG,cAAc,4BAAD,OAA8BH,EAA9B,mBACbI,kBAAkB,2BAAD,OAA6BJ,EAA7B,mBACjBK,kBAAkB,2BAAD,OAA6BL,EAA7B,mBACjBM,kBAAkB,2BAAD,OAA6BN,EAA7B,mBACjBO,mBAAmB,2BAAD,OAA6BP,EAA7B,sBAClBQ,mBAAmB,2BAAD,OAA6BR,EAA7B,oBCSLS,MAff,WACE,OACE,sBAAKjB,UAAU,MAAf,UACE,mEACA,cAAC,EAAD,CAAKd,MAAM,cAAcC,SAAUO,EAAQgB,wBAC3C,cAAC,EAAD,CAAKxB,MAAM,eAAeC,SAAUO,EAAQe,gBAC5C,cAAC,EAAD,CAAKvB,MAAM,YAAYC,SAAUO,EAAQiB,gBACzC,cAAC,EAAD,CAAKzB,MAAM,gBAAgBC,SAAUO,EAAQkB,oBAC7C,cAAC,EAAD,CAAK1B,MAAM,gBAAgBC,SAAUO,EAAQmB,oBAC7C,cAAC,EAAD,CAAK3B,MAAM,iBAAiBC,SAAUO,EAAQqB,qBAC9C,cAAC,EAAD,CAAK7B,MAAM,gBAAgBC,SAAUO,EAAQsB,yBCFpCE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e68d62e5.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n// base url to make request to the movie database\r\nconst instance = axios.create({\r\n  baseURL: 'https://api.themoviedb.org/3'\r\n});\r\n\r\nexport default instance;\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from './axios';\r\nimport './Row.css';\r\n\r\nconst base_url = 'https://image.tmdb.org/t/p/original/';\r\n\r\nfunction Row({ title, fetchUrl }) {\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  // A snippet of code which runs based on a spesific condition\r\n  useEffect(() => {\r\n    // if [], run once when the row loads, and dont run again\r\n    async function fetchData() {\r\n      const request = await axios.get(fetchUrl);\r\n      setMovies(request.data.results);\r\n      return request;\r\n    }\r\n    fetchData();\r\n  }, [fetchUrl]);\r\n\r\n  console.log(movies);\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <h2>{title}</h2>\r\n\r\n      <div className=\"row__posters\">\r\n        {movies.map((movie) => (\r\n          <img\r\n            key={movie.id}\r\n            className=\"row__poster\"\r\n            src={`${base_url}${movie.poster_path}`}\r\n            alt={movie.name}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY = '7a68d1874406e1660913a7449f445303';\r\n\r\nconst request = {\r\n  fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n  fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n  fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n  fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n  fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n  fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n  fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n  fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`\r\n};\r\n\r\nexport default request;\r\n","import './App.css';\nimport Row from './Row';\nimport request from './request';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <h1>ðŸ“º KUNFLIX ðŸŽ¥</h1>\n      <Row title=\"BEST AWARDS\" fetchUrl={request.fetchNetflixOriginals} />\n      <Row title=\"Trending Now\" fetchUrl={request.fetchTrending} />\n      <Row title=\"Top Rated\" fetchUrl={request.fetchTopRated} />\n      <Row title=\"Action Movies\" fetchUrl={request.fetchActionMovies} />\n      <Row title=\"Comedy Movies\" fetchUrl={request.fetchComedyMovies} />\n      <Row title=\"Romance Movies\" fetchUrl={request.fetchRomanceMovies} />\n      <Row title=\"Documentaries\" fetchUrl={request.fetchDocumentaries} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}